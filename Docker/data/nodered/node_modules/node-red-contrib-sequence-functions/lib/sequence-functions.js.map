{"version":3,"sources":["../src/sequence-functions.es6.js"],"names":[],"mappings":"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","file":"sequence-functions.js","sourcesContent":["'use strict';\n\nimport { Parser } from 'expr-eval';\nimport statistics from 'simple-statistics';\n\nexport default function(RED) {\n\n  class CaptureNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.size = n.size || 10;\n      this.period = n.period || 30;\n      this.interval = n.interval;\n      this.onNewMessage = n.onNewMessage;\n      this.eventSequence = [];\n      let node = this;\n      function canTrigger() {\n        return node.eventSequence.length > 0;\n      }\n      function isClear(msg) {\n        return ('clear' in msg) || (msg.topic === 'clear');\n      }\n      function isCapture(msg) {\n        return ('capture' in msg) || (msg.topic === 'capture');\n      }\n      function appendEventSequnce(msg) {\n        if ((msg.payload === undefined) || isCapture(msg)) {\n          return;\n        }\n        msg._ts = Date.now();\n        node.eventSequence.push(msg);\n        while (node.eventSequence.length > node.size) {\n          node.eventSequence.shift();\n        }\n      }\n      function copy() {\n        let ary = node.eventSequence.slice();\n        return ary.map((ev) => {\n          return {\n            topic: ev.topic,\n            payload: ev.payload\n          };\n        });\n      }\n      this.on('input', (msg) => {\n        if (isClear(msg)) {\n          node.eventSequence = [];\n          return;\n        }\n        appendEventSequnce(msg);\n        if (this.onNewMessage || isCapture(msg)) {\n          this.send({\n            topic: msg.topic,\n            payload: copy()\n          });\n        }\n      });\n      this.testInterval = setInterval(() => {\n        let criteria = Date.now() - this.period * 1000;\n        this.eventSequence = this.eventSequence.filter((ev) => {\n          return (ev._ts > criteria);\n        });\n      }, this.period * 1000);\n      if (this.interval && (parseInt(this.interval) >= 1)) {\n        this.triggerInterval = setInterval(() => {\n          if (canTrigger()) {\n            this.send({\n              payload: copy()\n            });\n          }\n        }, this.interval * 1000);\n      }\n      this.on('close', () => {\n        clearInterval(this.testInterval);\n        clearInterval(this.triggerInterval);\n        delete this.eventSequence;\n      });\n    }\n  }\n  RED.nodes.registerType('capture', CaptureNode);\n\n  class MapNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.topic = n.topic;\n      this.valueProperty = n.valueProperty || 'payload';\n      this.readFromProperty = n.readFromProperty;\n      this.mapToString = n.mapToString;\n      if (n.mapFunctionExpr) {\n        this.parsedMapFunction = Parser.parse(n.mapFunctionExpr);\n        this.mapFunction = (val) => {\n          try {\n            let result = this.parsedMapFunction.evaluate({ x: val });\n            if (this.mapToString) {\n              return String(result);\n            } else {\n              return result;\n            }\n          } catch (e) {\n            RED.log.error(RED._('sequence-functions.errors.parserError', { error: e }));\n            return null;\n          }\n        };\n      }\n      if (!this.mapFunction) {\n        this.mapFunction = (val) => {\n          if (this.mapToString) {\n            return String(val);\n          } else {\n            return val;\n          }\n        };\n      }\n      let node = this;\n      function applyMapFunction(msg) {\n        let ary = msg.payload;\n        return ary.map((ele) => {\n          let x = ele;\n          if (node.readFromProperty) {\n            x = RED.util.getMessageProperty(ele, node.valueProperty);\n          }\n          return node.mapFunction(x);\n        });\n      }\n      this.on('input', (msg) => {\n        if (!msg.payload) {\n          return;\n        }\n        if (!Array.isArray(msg.payload)) {\n          msg.payload = [msg.payload];\n        }\n        let result = applyMapFunction(msg);\n        if (result) {\n          this.send({\n            topic: this.topic || msg.topic,\n            payload: result\n          });\n        }\n      });\n    }\n  }\n  RED.nodes.registerType('map', MapNode);\n\n  class ReduceNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.topic = n.topic;\n      this.reduceRight = n.reduceRight;\n      if (n.reduceFunctionExpr) {\n        this.parsedReduceFunction = Parser.parse(n.reduceFunctionExpr);\n        try {\n          this.parsedReduceFunction.evaluate({ a: 0, x: 0 });\n          this.reduceFunction = (accu, val) => {\n            return this.parsedReduceFunction.evaluate({ a: accu, x: val });\n          };\n        } catch (e) {\n          RED.log.error(RED._('sequence-functions.errors.parserError', { error: e }));\n        }\n      }\n      if (!this.reduceFunction) {\n        this.reduceFunction = (accu, val) => {\n          return val;\n        };\n      }\n      this.arrayReduce = this.reduceRight ? [].reduceRight : [].reduce;\n      let node = this;\n      function applyReduceFunction(msg) {\n        let ary = msg.payload;\n        if (!ary.length || ary.length === 0) {\n          return null;\n        }\n        return node.arrayReduce.call(ary, (a, x) => {\n          return node.reduceFunction(a, x);\n        });\n      }\n      this.on('input', (msg) => {\n        if (!msg.payload) {\n          return;\n        }\n        if (!Array.isArray(msg.payload)) {\n          msg.payload = [msg.payload];\n        }\n        let result = applyReduceFunction(msg);\n        this.send({\n          topic: this.topic || msg.topic,\n          payload: result\n        });\n      });\n    }\n  }\n  RED.nodes.registerType('reduce', ReduceNode);\n\n  class FilterNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.topic = n.topic;\n      this.rules = n.rules || [];\n      this.checkall = n.checkall || 'true';\n\n      let operators = {\n        'eq': (a, b) => { return a == b; },\n        'neq': (a, b) => { return a != b; },\n        'lt': (a, b) => { return a < b; },\n        'lte': (a, b) => { return a <= b; },\n        'gt': (a, b) => { return a > b; },\n        'gte': (a, b) => { return a >= b; },\n        'btwn': (a, b, c) => { return a >= b && a <= c; },\n        'cont': (a, b) => { return (a + '').indexOf(b) != -1; },\n        'regex': (a, b, c, d) => { return (a + '').match(new RegExp(b,d?'i':'')); },\n        'true': (a) => { return a === true; },\n        'false': (a) => { return a === false; },\n        'null': (a) => { return (typeof a === 'undefined' || a === null); },\n        'nnull': (a) => { return (typeof a !== 'undefined' && a !== null); },\n        'else': (a) => { return a === true; }\n      };\n\n      for (let i=0; i<this.rules.length; i+=1) {\n        let rule = this.rules[i];\n        if (!rule.vt) {\n          if (!isNaN(Number(rule.v))) {\n            rule.vt = 'num';\n          } else {\n            rule.vt = 'str';\n          }\n        }\n        if (rule.vt === 'num') {\n          if (!isNaN(Number(rule.v))) {\n            rule.v = Number(rule.v);\n          }\n        }\n        if (typeof rule.v2 !== 'undefined') {\n          if (!rule.v2t) {\n            if (!isNaN(Number(rule.v2))) {\n              rule.v2t = 'num';\n            } else {\n              rule.v2t = 'str';\n            }\n          }\n          if (rule.v2t === 'num') {\n            rule.v2 = Number(rule.v2);\n          }\n        }\n      }\n\n      let node = this;\n      function applyFilterBase(prop, evaluateNodeProperty) {\n        var elseflag = true;\n        for (var i=0; i<node.rules.length; i+=1) {\n          var rule = node.rules[i];\n          var test = prop;\n          var v1,v2;\n          v1 = evaluateNodeProperty(rule.v,rule.vt);\n          v2 = rule.v2;\n          if (typeof v2 !== 'undefined') {\n            v2 = evaluateNodeProperty(rule.v2,rule.v2t);\n          }\n          if (rule.t == 'else') { test = elseflag; elseflag = true; }\n          if (operators[rule.t](test,v1,v2,rule.case)) {\n            elseflag = false;\n            if (node.checkall === 'false') {\n              return true;\n            }\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      this.on('input', (msg) => {\n        if (!msg.payload) {\n          return;\n        }\n        if (!Array.isArray(msg.payload)) {\n          msg.payload = [msg.payload];\n        }\n        try {\n          function evaluateNodeProperty(arg1, arg2) {\n            return RED.util.evaluateNodeProperty(arg1, arg2, node, msg);\n          }\n          let result = msg.payload.filter((prop) => {\n            return applyFilterBase(prop, evaluateNodeProperty);\n          });\n          this.send({\n            topic: this.topic || msg.topic,\n            payload: result\n          });\n        } catch(err) {\n          RED.log.error(RED._('sequence-functions.errors.parserError', { error: e }));\n        }\n      });\n    }\n  }\n  RED.nodes.registerType('filter', FilterNode);\n\n  class StatsNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.topic = n.topic;\n      this.statsFunction = n.statsFunction;\n      this.on('input', (msg) => {\n        if (!msg.payload) {\n          return;\n        }\n        if (!Array.isArray(msg.payload)) {\n          msg.payload = [msg.payload];\n        }\n        let result = statistics[this.statsFunction](msg.payload);\n        this.send({\n          topic: this.topic || msg.topic,\n          payload: result\n        });\n      });\n    }\n  }\n  RED.nodes.registerType('stats', StatsNode);\n}\n"]}